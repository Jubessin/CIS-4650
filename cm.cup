/*
* File Name: cm.cup
* TODO: File description
*/

import absyn.*;


terminal IF, WHILE, BOOL, INT, VOID, COMMA, SEMI, RETURN;
terminal LEFT_PARENTHESES, RIGHT_PARENTHESES, LEFT_CURLY_BRACKET, RIGHT_CURLY_BRACKET, LEFT_SQUARE_BRACKET, RIGHT_SQUARE_BRACKET;
terminal MULTIPLY, PLUS, MINUS, DIVIDE;
terminal AND, EQ, OR, ELSE, TRUTH, LT, GT, LE, GE, NE, UNARY, ASSIGN;
terminal String ID, NUM;
terminal ERROR;

non terminal NameTy type_specifier;
non terminal DecList program, declaration_list;
non terminal FunctionDec fun_declaration, fun_prototype;
non terminal Dec declaration; 
non terminal VarDec var_declaration, param;
non terminal VarDecList params, param_list, local_declarations;
non terminal Exp statement, expression_stmt;
non terminal ExpList statement_list;
nom terminal CompoundExp compound_stmt;

start with program;

program                         ::= declaration_list:d
                                    {:
                                        System.out.println("Completed program");
                                        RESULT = d;
                                    :};

declaration_list                ::= declaration_list:d1 declaration:d2
                                    {:
                                        System.out.println("declaration list");
                                        var t = d1;

                                        while (t.tail != null) {
                                            t = t.tail;
                                        }
                                        t.tail = new DecList(d2, null);
                                        RESULT = d1;
                                    :}
                                | declaration:d
                                    {:
                                        System.out.println("declaration");
                                        RESULT = new DecList(d, null);
                                    :};

declaration                     ::= var_declaration:v 
                                    {:
                                        RESULT = v;
                                    :}
                                | fun_prototype:fp
                                    {:
                                        System.out.println("function prototype");
                                        RESULT = fp;
                                    :};

var_declaration                 ::= type_specifier:t ID:i SEMI
                                    {:
                                        System.out.println("simple declaration");
                                        RESULT = new SimpleDec(tleft, tright, t, i);
                                    :}
                                | type_specifier:t ID:i LEFT_SQUARE_BRACKET NUM:n RIGHT_SQUARE_BRACKET SEMI
                                    {:
                                        System.out.println("array declaration");
                                        int num = Integer.valueOf(n);
                                        RESULT = new ArrayDec(tleft, tright, t, i, num);
                                    :};

type_specifier                  ::= BOOL:b
                                    {:
                                        System.out.println("bool");
                                        RESULT = new NameTy(bleft, bright, NameTy.Bool);
                                    :}
                                | INT:i
                                    {:
                                        System.out.println("int");
                                        RESULT = new NameTy(ileft, iright, NameTy.Int);
                                    :}
                                | VOID: v
                                    {:
                                        System.out.println("void");
                                        RESULT = new NameTy(vleft, vright, NameTy.Void);
                                    :};

fun_declaration                 ::= type_specifier:t ID:i LEFT_PARENTHESES  params:p RIGHT_PARENTHESES compound_stmt:c
                                   {:
                                       System.out.println("function declaration");
                                       RESULT = new FunctionDec(tleft, tright, t, i, p, c);
                                   :};

fun_prototype                   ::= type_specifier:t ID:i LEFT_PARENTHESES  params:p RIGHT_PARENTHESES SEMI
                                    {:
                                        System.out.println("function declaration");
                                        // I'm not sure why we need to pass a position for
                                        // NilExp, but I pass the position of the closest neighbour
                                        RESULT = new FunctionDec(tleft, tright, t, i, p, new NilExp(pleft, pright));
                                    :};

params                          ::= param_list:pl
                                    {:
                                        System.out.println("params");
                                        RESULT = pl;
                                    :}
                                | VOID
                                    {:
                                        System.out.println("void params");
                                        RESULT = null;
                                    :};

param_list                      ::= param_list:pl COMMA param:p
                                    {:
                                        System.out.println("params");
                                        var t = pl;

                                        while (t.tail != null) {
                                            t = t.tail;
                                        }
                                        t.tail = new VarDecList(p, null);
                                        RESULT = pl;
                                    :}
                                | param:p
                                    {:
                                        System.out.println("void params");
                                        RESULT = new VarDecList(p, null);
                                    :};

param                           ::= type_specifier:t ID:i SEMI
                                    {:
                                        System.out.println("simple declaration");
                                        RESULT = new SimpleDec(tleft, tright, t, i);
                                    :}
                                | type_specifier:t ID:i LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET SEMI
                                    {:
                                        System.out.println("array declaration");
                                        int num = Integer.valueOf(n);
                                        RESULT = new ArrayDec(tleft, tright, t, i, 0);
                                    :};

compound_stmt                   ::= LEFT_CURLY_BRACKET local_declarations:ld statement_list:sl RIGHT_CURLY_BRACKET
                                    {:
                                        RESULT = new CompoundExp(ldleft, ldright, ld, sl);
                                    :};

local_declarations              ::= local_declarations:ld var_declaration:vd
                                    {:
                                        System.out.println("local declarations");
                                        if (ld.head == null) {
                                            ld.head = s;
                                        } else {
                                            var t = ld;
                                            while (t.tail != null) {
                                                t = t.tail;
                                            }
                                            t.tail = new VarDecList(vd, null);
                                        }
                                        RESULT = ld;
                                    :}
                                |
                                    {:
                                        RESULT = new VarDecList(null, null);
                                    :};

statement_list                  ::= statement_list:sl statement:s
                                    {:
                                        System.out.println("statement list declaration");

                                        if (sl.head == null) {
                                            sl.head = s;
                                        } else {
                                            var t = sl;
                                            while (t.tail != null) {
                                                t = t.tail;
                                            }
                                            t.tail = new ExpList(s, null);
                                        }
                                        RESULT = sl;
                                    :}
                                |
                                    {:
                                        RESULT = new ExpList(null, null);
                                    :};

statement                       ::= expression_stmt:es
                                    {:

                                    :};

expression_stmt                 ::= expression:e SEMI
                                    {:

                                    :}
                                | SEMI
                                    {:

                                    :};

expression                      ::= var:v EQ expression:e
                                    {:

                                    :};

